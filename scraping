#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup, NavigableString, Tag
import urllib.parse as urlparse
language = "py"
#something = "inheritance-in-cpp"

if( language == "java"):
    something ="polymorphism"
    url = 'http://www.google.com/search?q=' + something
    page = requests.get(url)
    soup = BeautifulSoup(page.text, "html.parser")
    links = soup.find_all("a")

    for link in links:
        if "www.javatpoint.com" in str(link):
            #print(link.get('href'))
            stri = str(link.get('href'))
            break
    data = stri.split("&")
    #print(data[0])
    parsed = urlparse.urlparse(data[0])
    h = urlparse.parse_qs(parsed.query)['q']
    #print(h[0])
    page1 = requests.get(h[0])
    soup1 = BeautifulSoup(page1.text, "html.parser")
    #print(soup1.get_text())
    for header in soup1.find_all('h1'):
        nextNode = header
        while True:
            nextNode = nextNode.nextSibling
            if nextNode is None:
                break
            if isinstance(nextNode, NavigableString):
                print(nextNode.strip())
            if isinstance(nextNode, Tag):
                if nextNode.name == "h3":
                    break
                print(nextNode.get_text(strip=True).strip())
elif(language == "cpp"):
    something = "cpp-inheritance"
    url = 'http://www.google.com/search?q=' + something
    page = requests.get(url)
    soup = BeautifulSoup(page.text, "html.parser")
    links = soup.find_all("a")

    for link in links:
        if "www.javatpoint.com" in str(link):
            # print(link.get('href'))
            stri = str(link.get('href'))
            break
    data = stri.split("&")
    # print(data[0])
    parsed = urlparse.urlparse(data[0])
    h = urlparse.parse_qs(parsed.query)['q']
    # print(h[0])
    page1 = requests.get(h[0])
    soup1 = BeautifulSoup(page1.text, "html.parser")
    # print(soup1.get_text())
    for header in soup1.find_all('h1'):
        nextNode = header
        while True:
            nextNode = nextNode.nextSibling
            if nextNode is None:
                break
            if isinstance(nextNode, NavigableString):
                print(nextNode.strip())
            if isinstance(nextNode, Tag):
                if nextNode.name == "h2":
                    break
                print(nextNode.get_text(strip=True).strip())
else:
    something = "variables"
    url = 'https://www.programiz.com/python-programming/'+something
    page = requests.get(url)
    soup = BeautifulSoup(page.text, "html.parser")
    links = soup.find_all("a")

    for link in links:
        if "www.programiz.com" in str(link):
            print(link.get('href'))
            stri = link.get('href')
            break
    #data = stri.split("&")
    # print(data[0])
    #parsed = urlparse.urlparse(data[0])
    #h = urlparse.parse_qs(parsed.query)['q']
    # print(h[0])
    page1 = requests.get(stri.get('href'))
    soup1 = BeautifulSoup(page1.text, "html.parser")
    # print(soup1.get_text())
    for header in soup1.find_all('h1'):
        nextNode = header
        while True:
            nextNode = nextNode.nextSibling
            if nextNode is None:
                break
            if isinstance(nextNode, NavigableString):
                print(nextNode.strip())
            if isinstance(nextNode, Tag):
                if nextNode.name == "h2":
                    break
                print(nextNode.get_text(strip=True).strip())

#page = requests.get(url)
#soup = BeautifulSoup(page.text, "html.parser")
#artist = soup.find(class_='onlycontentinner')
#print(soup.get_text())
#for para in artist.find_all('h1', recursive=True):
 #   print(para.text)
#print(artist.get_text())


#link = soup.find('cite').text
#print(link)
#res = requests.get(link)
#soup1 = BeautifulSoup(res.text,'html.parser')


#if( something == "inheritance-in-java"):
    #print("this")
#url = 'https://www.javatpoint.com/'+something
